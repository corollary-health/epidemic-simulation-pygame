{"nodes":[{"nid":25,"uid":"custom","category":"function","type":"Simulation Loop (Wuhan Corona Virus)","x":464,"y":183,"fields":{"in":[{"name":"start"}],"out":[{"name":"pass"}]},"python":"def remap(narray,resolution):\n    x = np.interp(narray[0],[-1,1],[15,resolution[0]-15])\n    y = np.interp(narray[1],[-1,1],[50,resolution[1]- 15])\n    return np.array([int(x),int(y)])\n\n\n@on_start\ndef simLoop|||(*args, **kwargs):\n############################## EDIT THESE PARAMETERS ########################\n    inflength = {inflength}\n    mortality = {mortality}\n    rnaught = {rnaught}\n    infprob = {infprob}\n    infincubation={infincubation}\n    infdetected = {infdetected}\n#############################################################################\n\n    if infprob == 0:\n        infprob = rnaught/(kwargs['Settings']['NetworkX']['k']*inflength)\n    if rnaught == 0:\n        rnaught = infprob*kwargs['Settings']['NetworkX']['k']*inflength\n    \n    pos = kwargs['Settings']['NetworkX']['Pos']\n    G = kwargs['Data']\n    screensize = (800,800)\n    G.graph['colors'] = {{\"Naive\":(99, 7, 238),\"Infected Symptomatic\":(145, 238, 7),\"Infected Asymptomatic\":(159, 190, 126),\"Immune\":(255, 235, 59),\"Dead\":(239, 99, 7)}}\n    G.graph['disease'] = {{\"Infection Probability\" : infprob,\"Infection Detection\":infdetected, \"Infection Length\" : inflength, \"Incubation Length\":infincubation, \"Mortality\": mortality}}\n    # Add Parameters to Nodegraph\n    for nid in G:\n        G.nodes[nid]['Status'] = 'Naive'\n        G.nodes[nid]['Day'] = 0\n    # Remap -1 1 square to  pygame resolution\n    for nid in pos:\n        pos[nid] = remap(pos[nid],screensize) \n    G.nodes[0]['Status'] = 'Infected Symptomatic'\n    # initialize the pygame module\n    pg.init()\n    # load and set the logo\n    #logo = pg.image.load(\"logo.png\")\n    #pg.display.set_icon(logo)\n    pg.display.set_caption(\"{diseasename}\")\n    legend = pg.image.load('legend.png')\n     \n    # create a surface on screen that has the size of 240 x 180\n    screen = pg.display.set_mode(screensize)\n    background = pg.Surface(screen.get_size())\n    background = background.convert()\n    background.fill((236, 239, 241))\n    \n    green = (255, 255, 255) \n    deaths = 0\n    infected = 1\n    asymptomatic=1\n    symptomatic=0 \n    willdie=0\n    infday = 0 \n    detected = 0\n    immune = 0 \n    datacontainer={{\"Day\":[],\"Deaths\":[],\"Cumulative Infections\":[],\"Detected Infections\":[],\"Current Undetected Infections\":[]}}\n    font = pg.font.Font(pg.font.match_font('lato'), 20)\n    text = font.render('R0: {{0}}'.format(rnaught), True, green)\n    textinfected = font.render('Infected: {{0}}'.format(infected), True, green)\n    # define a variable to control the main loop\n    running = True\n     \n    # main loop\n    while running:\n        #infected = 0\n        if deaths >= 60:\n            running = False\n\n        screen.blit(background, (0, 0))\n        pg.draw.rect(background,(74,20,140),(0,0,screensize[0],100),0)\n\n        textdeath = font.render('Deaths: {{}}'.format(deaths), True, green)\n        screen.blit(textdeath, (10,10))\n        textinfected = font.render('Cumulative Infections: {{}}'.format(infected), True, green)\n        screen.blit(textinfected, (10,25))\n        \n        textinfected = font.render('Recoveries: {{}}'.format(immune), True, green)\n        screen.blit(textinfected, (10,55))\n        textinfected = font.render('Naive: {{}}'.format(kwargs['Settings']['NetworkX']['nodes']-infected), True, green)\n        screen.blit(textinfected, (10,40))\n        totaldetected = infected - (asymptomatic+immune+deaths)\n        textsymptomatic = font.render('Cumulative Detected Infections: {{}}'.format(totaldetected), True, green)\n        screen.blit(textsymptomatic, (10,70))\n        \n        textasymptomatic = font.render('Current Undetected Infections: {{}}'.format(asymptomatic), True, green)\n        screen.blit(textasymptomatic, (10,85))\n        \n        textdays = font.render('Epidemic Day: {{}}'.format(infday), True, green)\n        screen.blit(textdays, ((screensize[0]/2)-40,10))\n        textrnaught = font.render('R0: {{}}'.format(rnaught), True, green)\n        screen.blit(textrnaught, ((screensize[0]/2)-40,25))\n        \n        textmortality = font.render('Mortality Rate: {{}} %'.format(mortality*100), True, green)\n        screen.blit(textmortality, ((screensize[0]/2)+40,25))\n        datacontainer['Day'].append(infday)\n        datacontainer['Deaths'].append(deaths)\n        datacontainer['Cumulative Infections'].append(infected)\n        datacontainer['Detected Infections'].append(totaldetected)\n        datacontainer['Current Undetected Infections'].append(asymptomatic)\n        \n        for nid in pos:\n            for e in G.edges(nid):\n                cnode= e[1]\n                gfx.line(screen,pos[nid][0],pos[nid][1],pos[cnode][0],pos[cnode][1],(120,144,156))\n        for nid in pos:\n            color = G.graph['colors'][G.nodes[nid]['Status']]\n            gfx.aacircle(screen, pos[nid][0],pos[nid][1], 6, color)\n            gfx.filled_circle(screen, pos[nid][0],pos[nid][1], 6, color)\n            \n            if G.nodes[nid]['Day'] == G.graph['disease']['Infection Detection']:\n                detected = detected + 1    \n            if G.nodes[nid]['Status'] == \"Infected Symptomatic\":\n                if G.nodes[nid]['Day'] == G.graph['disease'][\"Infection Length\"]:\n                    roll = random.random()\n                    if roll >= G.graph['disease']['Mortality']:\n                        G.nodes[nid]['Status'] = \"Immune\"\n                        immune = immune+1\n                        symptomatic = symptomatic-1\n                    if roll < G.graph['disease']['Mortality']:\n                        G.nodes[nid]['Status'] = \"Dead\"\n                        symptomatic = symptomatic-1\n                        deaths=deaths+1\n                G.nodes[nid]['Day'] = G.nodes[nid]['Day'] + 1\n                for e in G.edges(nid):\n                    cnode = e[1]\n                    if G.nodes[cnode]['Status'] != \"Dead\": \n                        if G.nodes[cnode]['Status'] != \"Immune\":\n                            if G.nodes[cnode]['Status'] != \"Infected Asymptomatic\":\n                                if G.nodes[cnode]['Status'] != \"Infected Symptomatic\":\n                                    roll = random.random()\n                                    \n                                    if roll < G.graph['disease']['Infection Probability']:\n                                        G.nodes[cnode]['Status'] = 'Infected Asymptomatic'\n                                        infected = infected+1\n                                        asymptomatic = asymptomatic+1\n                                \n                                \n            if G.nodes[nid]['Status'] == \"Infected Asymptomatic\":\n                if G.nodes[nid]['Day'] >= G.graph['disease'][\"Incubation Length\"]:\n                    asymptomatic = asymptomatic-1\n                    symptomatic = symptomatic+1\n                    G.nodes[nid]['Status'] = \"Infected Symptomatic\"\n                G.nodes[nid]['Day'] = G.nodes[nid]['Day'] + 1 \n        \n    # event handling, gets all event from the event queue\n        for event in pg.event.get():\n    # only do something if the event is of type QUIT\n            if event.type == pg.QUIT:\n    # change the value to False, to exit the main loop\n                running = False\n        infday = infday + 1\n        \n        screen.blit(legend,(625,-15))\n        pg.display.flip()\n    time.sleep(10)\n    df=pd.DataFrame(datacontainer)\n    print(df)\n    df = df[['Deaths','Detected Infections','Cumulative Infections']].rolling(1).sum()\n    #sns.barplot(x = 'Day', y = 'Cumulative Infections', data = df)\n    #sns.barplot(x = 'Day', y = 'Detected Infections', palette = 'magma', data = df)\n    sns.lineplot(data=df, linewidth=2)\n\n\n    plt.show()\n    \n    return kwargs\n ","python_import":"import pygame as pg\nimport pygame.gfxdraw as gfx \nimport random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport time","python_exec":"simLoop|||","settings":[{"key":"diseasename","label":"Disease Name For Pygame Caption"},{"key":"rnaught","label":"R0 for disease (Set to zero to calculate from infection probablility)"},{"key":"infprob","label":"Contact Infection Probability (Set this value to 0 to have it calculated from R0)"},{"key":"infincubation","label":"Number of Simulation Cycles a Person Remains Incubated. One cycle for example could represent a day "},{"key":"infdetected","label":"Number of Simulation Cycles before illness Detection"},{"key":"inflength","label":"Number of Simulation Cycles a Person Remains infectious after cycle zero, incubation is excluded. One cycle for example could represent a day "},{"key":"mortality","label":"What is the Mortality Rate of this disease 1 is equivalent to 100%"}],"icon":"./static/media/for.e1841ce0.svg","data":{"diseasename":"Novel coronavirus (2019-nCoV) Wuhan Virus","rnaught":"0","infprob":"0.045","inflength":"20","mortality":"0.13","infincubation":"5","infdetected":"10"},"description":"![STREMECOVER](http://go.pluricorp.com/websitemedia/gitlab/templatetop.svg)\n\n","showExecution":false,"showFunction":true,"executionClass":"","descriptionClass":"","importsClass":"","functionClass":"uk-active","showDescription":false,"toggleMarkdown":false,"toggleUserDialog":false,"stringDialog":"[{\"key\":\"diseasename\",\"label\":\"Disease Name For Pygame Caption\"},{\"key\":\"rnaught\",\"label\":\"R0 for disease (Set to zero to calculate from infection probablility)\"},{\"key\":\"infprob\",\"label\":\"Contact Infection Probability (Set this value to 0 to have it calculated from R0)\"},{\"key\":\"infincubation\",\"label\":\"Number of Simulation Cycles a Person Remains Incubated. One cycle for example could represent a day \"},{\"key\":\"infdetected\",\"label\":\"Number of Simulation Cycles before illness Detection\"},{\"key\":\"inflength\",\"label\":\"Number of Simulation Cycles a Person Remains infectious after cycle zero, incubation is excluded. One cycle for example could represent a day \"},{\"key\":\"mortality\",\"label\":\"What is the Mortality Rate of this disease 1 is equivalent to 100%\"}]","stringPins":"{\"in\":[{\"name\":\"start\"}],\"out\":[{\"name\":\"pass\"}]}","togglePins":false,"pintracker":false,"dialogtracker":false,"descriptiontracker":false,"showImports":false,"headerStyle":{"background":"#ad1562"}}],"connections":[],"title":"Simulation Loop (Wuhan Corona Virus)","showPopup":false,"current":-1,"count":1,"servers":{},"serverselection":null}